from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Form
from utils import calculate_norms, calculate_workout_calories, get_food_calories


router = Router()

user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/set_profile - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_food - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π\n"
        "/log_water - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –≤–æ–¥—ã\n"
        "/log_workout - –ó–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "/check_progress - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
    )

# FSM: –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.reply("–ö–∞–∫–æ–π —É –≤–∞—Å –≤–µ—Å?")
    await state.set_state(Form.weight)

@router.message(Form.weight)
async def profile_weight(message: Message, state: FSMContext):
    try:
        user_data[message.from_user.id] = {"weight": float(message.text)}
        await message.reply("–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–æ—Å—Ç?")
        await state.set_state(Form.height)
    except ValueError:
        await message.reply("–ö–∞–∫–æ–π —É –≤–∞—Å –≤–µ—Å? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
        await state.set_state(Form.weight)

@router.message(Form.height)
async def profile_height(message: Message, state: FSMContext):
    try:
        user_data[message.from_user.id]["height"] = float(message.text)
        await message.reply("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
        await state.set_state(Form.age)
    except ValueError:
        await message.reply("–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–æ—Å—Ç? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
        await state.set_state(Form.height)

@router.message(Form.age)
async def profile_age(message: Message, state: FSMContext):
    try:
        user_data[message.from_user.id]["age"] = int(message.text)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        await state.set_state(Form.activity)
    except ValueError:
        await message.reply("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
        await state.set_state(Form.age)

@router.message(Form.activity)
async def profile_activity(message: Message, state: FSMContext):
    try:
        user_data[message.from_user.id]["activity"] = int(message.text)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        await state.set_state(Form.city)
    except ValueError:
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        await state.set_state(Form.activity)

@router.message(Form.city)
async def profile_city(message: Message, state: FSMContext):
    try:
        user_data[message.from_user.id]["city"] = message.text
        await message.reply("–ö–∞–∫–æ–≤–æ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π? –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'auto'")
        await state.set_state(Form.goal)
    except ValueError:
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        await state.set_state(Form.city)

@router.message(Form.goal)
async def profile_goal(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        norms = calculate_norms(user_data[user_id])
        if message.text != "auto":
            user_data[user_id]["calorie_goal"] = int(message.text)
        else:
            user_data[user_id]["calorie_goal"] = norms['calories']
        user_data[user_id]["water_goal"] = norms['water']
        user_data[user_id]["logged_water"] = 0
        user_data[user_id]["logged_calories"] = 0
        user_data[user_id]["burned_calories"] = 0
        await message.reply(
            f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {norms['water']} –º–ª\n–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {norms['calories']} –∫–∫–∞–ª")
        if norms.get('temperature'):
            await message.reply(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ: {norms['temperature']}¬∞C")
        await state.clear()
    except ValueError:
        await message.reply("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å?")
        await state.set_state(Form.goal)


@router.message(Command("log_water"))
async def log_water(message: Message):
    try:
        user_id = message.from_user.id
        amount = float(message.text.split()[1])
        user_data[user_id]["logged_water"] += amount
        logged = user_data[user_id]['logged_water']
        goal = user_data[user_id]['water_goal']
        await message.reply(f"- –í—ã–ø–∏—Ç–æ: {logged} –º–ª –∏–∑ {goal} –º–ª.\n- –û—Å—Ç–∞–ª–æ—Å—å: {goal - logged} –º–ª.")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")


@router.message(Command("log_food"))
async def log_food(message: Message):
    try:
        user_id = message.from_user.id
        dish = ' '.join(message.text.split()[1:-1])
        weight = float(message.text.split()[-1])
        amount = get_food_calories(dish)["calories"] * weight / 100
        user_data[user_id]["logged_calories"] += amount
        logged = user_data[user_id]['logged_calories']
        goal = user_data[user_id]['calorie_goal']
        burned = user_data[user_id]['burned_calories']
        await message.reply(f"- –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –∫–∫–∞–ª.\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged} –∫–∫–∞–ª –∏–∑ {goal} –∫–∫–∞–ª.\n- –°–æ–∂–∂–µ–Ω–æ: {burned} –∫–∫–∞–ª.\n- –û—Å—Ç–∞–ª–æ—Å—å: {goal - logged + burned} –∫–∫–∞–ª.")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    try:
        user_id = message.from_user.id
        sport = ' '.join(message.text.split()[1:-1])
        duration = float(message.text.split()[-1])
        weight = user_data[user_id]['weight']
        amount = calculate_workout_calories(sport, duration, weight)
        user_data[user_id]["burned_calories"] += amount
        user_data[user_id]["water_goal"] += 200 * (duration // 30)
        logged = user_data[user_id]['logged_calories']
        goal = user_data[user_id]['calorie_goal']
        burned = user_data[user_id]['burned_calories']
        await message.reply(f"- –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –∫–∫–∞–ª.\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged} –∫–∫–∞–ª –∏–∑ {goal} –∫–∫–∞–ª.\n- –°–æ–∂–∂–µ–Ω–æ: {burned} –∫–∫–∞–ª.\n- –û—Å—Ç–∞–ª–æ—Å—å: {goal - logged + burned} –∫–∫–∞–ª.")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")


@router.message(Command("check_progress"))
async def check_progress(message: Message):
    try:
        user_id = message.from_user.id
        logged = user_data[user_id]['logged_calories']
        goal = user_data[user_id]['calorie_goal']
        burned = user_data[user_id]['burned_calories']
        logged_water = user_data[user_id]['logged_water']
        goal_water = user_data[user_id]['water_goal']
        await message.reply(
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
            "–í–æ–¥–∞:\n"
            f"- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {goal_water} –º–ª.\n"
            f"- –û—Å—Ç–∞–ª–æ—Å—å: {goal_water - logged_water} –º–ª."
            "–ö–∞–ª–æ—Ä–∏–∏:\n"
            f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged} –∫–∫–∞–ª –∏–∑ {goal} –∫–∫–∞–ª.\n"
            f"- –°–æ–∂–∂–µ–Ω–æ: {burned} –∫–∫–∞–ª.\n"
            f"- –û—Å—Ç–∞–ª–æ—Å—å: {goal - logged + burned} –∫–∫–∞–ª."
        )
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)